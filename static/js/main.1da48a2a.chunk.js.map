{"version":3,"sources":["subjectsStatus.tsx","main.dot","plan.tsx","dependencyChartData.tsx","acercade_correlatividades.jpg","DependencyChart.tsx","subjectsDifficulty.tsx","DifficultyAssessment.tsx","InscriptionRecommendation.tsx","store.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTION_TOGGLE","network","getGraphData","a","Promise","resolve","reject","fetch","dotPath","text","dot","parseDOTNetwork","subjectLength","subject","s","parseInt","subjectsRect","131","144","132","135","138","136","134","142","137","133","141","139","162","145","140","167","163","169","168","DependencyChart","checked","useSelector","state","subjectsStatus","dispatch","useDispatch","handleClick","id","type","toggleSubject","useState","graphData","setGraphData","_canDo","toString","has","edges","filter","e","to","map","from","every","requirement","canDo","nodes","viewBox","xmlns","href","acercade_correlatividades","width","height","Object","entries","key","value","x","y","fill","fillOpacity","rx","ry","onClick","cursor","ACTION_SET","setDifficulty","difficulty","DifficultyAssessment","subjectsDifficulty","subjects","setSubjects","percentaje","setPercentaje","fromEntries","sort","e1","e2","n","label","forEach","updateDifficulty","Grid","container","spacing","item","xs","FormControl","Select","labelId","onChange","target","MenuItem","variant","style","marginRight","InputLabel","htmlFor","OutlinedInput","required","labelWidth","error","Button","color","prob","keys","i","baseDifficulty","Math","random","InscriptionRecommendation","setEdges","subjectsPerCuatrimestre","setSubjectsPerCuatrimestre","plan","setPlan","isApproved","done","length","requisito","phenotypeToPlan","phenotype","myPlan","flat","cuatri","push","arePhenotypeEqual","ph1","ph2","cs1","cs2","JSON","stringify","mutationFunction","oldPhenotype","slice","pos","floor","fitnessFunction","getRandomPhenotype","array","temporaryValue","randomIndex","currentIndex","shuffle","defaultPopulations","Array","ga","GeneticAlgorithmConstructor","population","populationSize","evolve","best","cuat","List","ListItem","ListItemText","primary","rootReducer","combineReducers","Set","action","newState","c","add","delete","store","createStore","App","className","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1da48a2a.chunk.js","sourcesContent":["const ACTION_TOGGLE = 'toggle'\n\nexport function subjectsStatusReducer(state: Set<string> = new Set(), action: any): Set<string> {\n  const newState = new Set<string>()\n  state.forEach((c) => newState.add(c))\n  if (state && action.type === ACTION_TOGGLE) {\n    const {id} = action\n    if (state.has(id)) {\n      newState.delete(id)\n    } else {\n      newState.add(id)\n    }\n    return newState\n  }\n  return newState\n}\n\nexport function toggleSubject(id: string) {\n  return {\n    type: ACTION_TOGGLE,\n    id,\n  }\n}\n","export default __webpack_public_path__ + \"static/media/main.6a8fc0df.dot\";","import dotPath from './main.dot'\nimport {parseDOTNetwork} from 'vis-network/standalone'\n\nexport declare interface Node {\n  id: number,\n  label: string,\n}\n\nexport declare interface Edge {\n  from: number,\n  to: number,\n}\n\nexport declare interface GraphData {\n  nodes: Node[],\n  edges: Edge[],\n}\n\nlet network: Promise<GraphData> | null = null;\nexport async function getGraphData(): Promise<GraphData> {\n  if (!network) {\n    network = new Promise(async (resolve, reject) => {\n      const dot = await (await fetch(dotPath)).text()\n      resolve(parseDOTNetwork(dot))\n    })\n  }\n  return network\n}\n\nexport function subjectLength(subject: number | string): number {\n  const s = typeof(subject) === 'string' ? parseInt(subject) : subject\n  return (s === 137 || s === 139) ? 2 : 1\n}\n","import { GraphData } from './plan'\n\nconst subjectsRect = {\n  131: [268, 201, 136, 62],\n  144: [266, 358, 136, 62],\n  132: [268, 551, 136, 62],\n  135: [268, 657, 136, 62],\n  138: [479, 775, 133, 59],\n  136: [479, 657, 133, 59],\n  134: [479, 552, 133, 59],\n  142: [718, 774, 133, 59],\n  137: [718, 658, 133, 59],\n  133: [716, 551, 136, 62],\n  141: [718, 316, 133, 59],\n  139: [718, 211, 133, 59],\n  162: [954, 258, 134, 60],\n  145: [954, 434, 133, 59],\n  140: [954, 552, 133, 59],\n  167: [954, 657, 134, 60],\n  163: [952, 831, 134, 60],\n  169: [1187, 552, 134, 60],\n  168: [1187, 255, 134, 60],\n};\nconst canDo = (subject: number | string, checked: Set<string>, graphData: GraphData) => {\n  subject = subject.toString()\n  if (checked.has(subject)) {\n    return false;\n  }\n  const requirements = graphData.edges.filter((e) => e.to.toString() === subject).map((e) => e.from.toString())\n  return requirements.every((requirement) => checked.has(requirement))\n}\nexport { subjectsRect, canDo };\n","export default __webpack_public_path__ + \"static/media/acercade_correlatividades.a9264376.jpg\";","import React, { useState } from 'react';\nimport './DependencyChart.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from './store'\nimport { toggleSubject } from './subjectsStatus'\nimport { getGraphData, GraphData } from './plan'\nimport { subjectsRect, canDo } from './dependencyChartData'\nimport acercade_correlatividades from './acercade_correlatividades.jpg'\n\nfunction DependencyChart() {\n  const checked = useSelector((state: RootState) => state.subjectsStatus);\n  const dispatch = useDispatch()\n  const handleClick = (id: string) => {\n    dispatch(toggleSubject(id))\n  }\n  const [graphData, setGraphData] = useState<null | GraphData>(null)\n  useState(() => {\n    (async () => {\n      setGraphData(await getGraphData())\n    })()\n  })\n  const _canDo = (subject: string) => {\n      if (!graphData) {\n        return false;\n      }\n      const defaultEdges = {nodes: [], edges: []}\n      return canDo(subject, checked, graphData || defaultEdges)\n  }\n  return (\n      <div>\n          <svg viewBox=\"0 0 1406 946\" xmlns=\"http://www.w3.org/2000/svg\">\n              <image href={acercade_correlatividades} width=\"1406\" height=\"946\"/>\n              {Object.entries(subjectsRect).map(([key, value]) => (\n                <rect key={key} x={value[0]} y={value[1]} width={value[2]} height={value[3]} fill={checked.has(key) ? 'red' : _canDo(key) ? 'yellow' : 'transparent'} fillOpacity=\"0.7\" rx=\"22\" ry=\"22\" onClick={() => handleClick(key.toString())} cursor=\"pointer\" />\n              ))}\n          </svg>\n      </div>\n  )\n}\n\nexport default DependencyChart\n","const ACTION_SET = 'set'\n\nexport function subjectsDifficultyReducer(state: {[subject: string]: number} = {}, action: any) {\n  if (typeof state !== typeof undefined && action.type === ACTION_SET) {\n    const newState = Object.fromEntries(Object.entries(state))\n    const {id, difficulty} = action\n    newState[id] = difficulty\n    return newState\n  }\n  return state\n}\n\nexport function setDifficulty(id: string, difficulty: number) {\n  return {\n    type: ACTION_SET,\n    id,\n    difficulty,\n  }\n}\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getGraphData, subjectLength } from './plan'\nimport { setDifficulty } from './subjectsDifficulty'\nimport { RootState } from './store'\n\nimport Grid from '@material-ui/core/Grid';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nfunction DifficultyAssessment() {\n  const subjectsDifficulty = useSelector((state: RootState) => state.subjectsDifficulty);\n  const checked = useSelector((state: RootState) => state.subjectsStatus);\n  const [subjects, setSubjects] = useState<null | { [k: string]: any; }>(null)\n  const [percentaje, setPercentaje] = useState(100)\n  useState(() => {\n    (async () => {\n      const graphData = await getGraphData()\n      setSubjects(Object.fromEntries(graphData.nodes.sort((e1, e2) => e1.id - e2.id).map((n) => [n.id, n.label])))\n      graphData.nodes.forEach((n) => dispatch(setDifficulty(n.id.toString(), subjectLength(n.id))))\n    })()\n  })\n\n  const dispatch = useDispatch()\n  const updateDifficulty = (id: string, difficulty: number) => {\n    dispatch(setDifficulty(id, difficulty))\n  }\n  const generateCuatrimestres = () => {\n    if (percentaje < 1 || percentaje > 100) return\n    if (!subjects) return\n    const prob = percentaje / 100\n    Object.keys(subjects).forEach((id) => {\n      let baseDifficulty = subjectLength(id)\n      let i\n      for (i = 0; i < 3; i++) {\n        if (Math.random() < prob) break\n      }\n      updateDifficulty(id, baseDifficulty + i)\n    })\n  }\n  return (\n    <div>\n      <h2>Cuatrimestres para aprobar las materias</h2>\n      <p>Determinar la dificultad estimada de cada materia para armar un plan. La dificultad se mide en cuatrimestes desde inscripción hasta aprobar el final.</p>\n      <Grid container spacing={3}>\n        {subjects && Object.entries(subjects).filter(([id]) => !checked.has(id)).map(([id, label]) => (\n          <Grid item key={id} xs={4}>\n            <Grid>\n            {label}\n            </Grid>\n            <FormControl>\n              <Select\n                labelId={'label-cuatrimestres-' + id}\n                id={'cuatrimestres-' + id}\n                value={subjectsDifficulty[id] || subjectLength(id)}\n                onChange={(e: React.ChangeEvent<{value: unknown}>) => updateDifficulty(id, e.target.value as number)}\n              >\n                <MenuItem value={subjectLength(id) + 0}>{subjectLength(id) + 0}</MenuItem>\n                <MenuItem value={subjectLength(id) + 1}>{subjectLength(id) + 1}</MenuItem>\n                <MenuItem value={subjectLength(id) + 2}>{subjectLength(id) + 2}</MenuItem>\n                <MenuItem value={subjectLength(id) + 3}>{subjectLength(id) + 3}</MenuItem>\n              </Select>\n            </FormControl>\n          </Grid>\n        ))}\n      </Grid>\n      <h3>Generar aleatoriamente según probabilidad de aprobar cada cursada</h3>\n      <FormControl variant=\"outlined\" style={{marginRight: 8}}>\n        <InputLabel htmlFor=\"porcentaje\">Porcentaje</InputLabel>\n        <OutlinedInput\n          required\n          id=\"porcentaje\"\n          style={{width: 90}}\n          labelWidth={80}\n          type=\"number\"\n          value={percentaje}\n          error={percentaje < 1 || percentaje > 100}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setPercentaje(parseInt(e.target.value, 10))}\n          />\n      </FormControl>\n      <Button variant=\"contained\" color=\"primary\" onClick={generateCuatrimestres}>Generar</Button>\n    </div>\n  )\n}\n\nexport default DifficultyAssessment\n","import React, { useState } from 'react';\nimport GeneticAlgorithmConstructor from 'geneticalgorithm'\nimport { useSelector } from 'react-redux'\nimport { RootState } from './store'\nimport { getGraphData } from './plan'\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// https://stackoverflow.com/a/2450976\nfunction shuffle(array: any[]): any[] {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nfunction InscriptionRecommendation() {\n  const subjectsDifficulty = useSelector((state: RootState) => state.subjectsDifficulty);\n  const checked = useSelector((state: RootState) => state.subjectsStatus);\n  const [subjects, setSubjects] = useState<null | { [k: string]: any; }>(null)\n  const [edges, setEdges] = useState<null | { from: number, to: number }[]>(null)\n  useState(() => {\n    (async () => {\n      const graphData = await getGraphData()\n      setSubjects(Object.fromEntries(graphData.nodes.sort((e1, e2) => e1.id - e2.id).map((n) => [n.id, n.label])))\n      setEdges(graphData.edges)\n    })()\n  })\n  const [subjectsPerCuatrimestre, setSubjectsPerCuatrimestre] = useState(3)\n  const [plan, setPlan] = useState<null | number[][]>(null)\n  const isApproved = (subject: number, done: number[]) => {\n    if (checked.has(subject.toString())) return true\n    return done.filter((s) => s === subject).length === subjectsDifficulty[subject]\n  }\n  const canDo = (subject: number, done: number[]) => {\n    if (!edges) return false;\n    if (isApproved(subject, done)) return false;\n    const requirements = edges.filter((e) => e.to === subject).map((e) => e.from)\n    return requirements.every((requisito) => isApproved(requisito, done))\n  }\n  const phenotypeToPlan = (phenotype: number[]) => {\n    const myPlan: number[][] = []\n    while (!phenotype.every((s) => isApproved(s, myPlan.flat().flat()))) {\n      const cuatri = []\n      for (let i = 0; i < phenotype.length; i++) {\n        const subject = phenotype[i]\n        if (canDo(subject, myPlan.flat().flat())) {\n          cuatri.push(subject)\n          if (cuatri.length === subjectsPerCuatrimestre) break\n        }\n      }\n      myPlan.push(cuatri)\n    }\n    return myPlan\n  }\n\n  const arePhenotypeEqual = (ph1: number[], ph2: number[]) => {\n    const cs1 = phenotypeToPlan(ph1)\n    const cs2 = phenotypeToPlan(ph2)\n    if (cs1.length !== cs2.length) return false\n    for (let i = 0; i < cs1.length; i++) {\n      if (JSON.stringify(cs1[i].sort()) !== JSON.stringify(cs2[i].sort())) {\n        return false\n      }\n    }\n    return true\n  }\n  const mutationFunction = (oldPhenotype: number[]) => {\n    const phenotype = oldPhenotype.slice()\n    while (arePhenotypeEqual(phenotype, oldPhenotype)) {\n      const pos = Math.floor(Math.random() * (phenotype.length - 1));\n      [phenotype[pos], phenotype[pos + 1]] = [phenotype[pos + 1], phenotype[pos]];\n    }\n    return phenotype\n  }\n\n  const fitnessFunction = (phenotype: number[]) => {\n    return -phenotypeToPlan(phenotype).length\n  }\n\n  const getRandomPhenotype = () => {\n    if (!subjects) return [];\n    return shuffle(Object.keys(subjects).map((s) => parseInt(s, 10)).filter((s) => !checked.has(s.toString())))\n  }\n  const populationSize = 10;\n  const defaultPopulations = Array.from({length: populationSize}).map(() => getRandomPhenotype())\n  const createRandomPlan = () => {\n    setPlan(phenotypeToPlan(getRandomPhenotype()))\n  }\n  const createGoodPlan = () => {\n    let ga = GeneticAlgorithmConstructor({\n      mutationFunction,\n      fitnessFunction,\n      population: defaultPopulations,\n      populationSize,\n    })\n    setPlan(phenotypeToPlan(ga.evolve().evolve().evolve().evolve().evolve().evolve().best()))\n  }\n  return (\n    <div>\n      <h2>Plan de inscripciones</h2>\n      <FormControl>\n        <Select\n          labelId=\"label-materias-por-cuatrimestre\"\n          id=\"materias-por-cuatrimestre\"\n          value={subjectsPerCuatrimestre}\n          onChange={(e: React.ChangeEvent<{value: unknown}>) => setSubjectsPerCuatrimestre(e.target.value as number)}\n        >\n          <MenuItem value={1}>1</MenuItem>\n          <MenuItem value={2}>2</MenuItem>\n          <MenuItem value={3}>3</MenuItem>\n          <MenuItem value={4}>4</MenuItem>\n        </Select>\n      </FormControl>\n      {subjects && <Button onClick={createRandomPlan}>Crear plan aleatorio</Button>}\n      {subjects && <Button onClick={createGoodPlan}>Crear plan piola</Button>}\n      {plan && subjects && (\n        plan.map((cuat, i) => (\n          <>\n            <h3>Cuatrimestre {i+1}</h3>\n            <List>\n            {cuat.map((subject) => (\n                  <ListItem>\n                    <ListItemText primary={subjects[subject]} />\n                  </ListItem>\n                ))}\n            </List>\n          </>\n        ))\n      )}\n    </div>\n  )\n}\nexport default InscriptionRecommendation\n","import { combineReducers } from 'redux'\nimport { subjectsStatusReducer } from './subjectsStatus'\nimport { subjectsDifficultyReducer } from './subjectsDifficulty'\nimport { createStore } from 'redux'\n\nlet rootReducer = combineReducers({subjectsStatus: subjectsStatusReducer, subjectsDifficulty: subjectsDifficultyReducer})\n\nlet store = createStore(rootReducer);\nexport type RootState = ReturnType<typeof store.getState>\nexport default store;\n","import React from 'react';\nimport DependencyChart from './DependencyChart'\nimport DifficultyAssessment from './DifficultyAssessment'\nimport InscriptionRecommendation from './InscriptionRecommendation'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Container maxWidth=\"lg\">\n          <DependencyChart />\n          <DifficultyAssessment />\n          <InscriptionRecommendation />\n        </Container>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}