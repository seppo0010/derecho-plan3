{"version":3,"sources":["subjectsStatus.tsx","main.dot","plan.tsx","dependencyChartData.tsx","acercade_correlatividades.jpg","DependencyChart.tsx","subjectsDifficulty.tsx","DifficultyAssessment.tsx","estimateSubjects.worker.ts","InscriptionRecommendation.tsx","store.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ACTION_TOGGLE","network","getGraphData","a","Promise","resolve","reject","fetch","dotPath","text","dot","parseDOTNetwork","subjectsRect","131","144","132","135","138","136","134","142","137","133","141","139","162","145","140","167","163","169","168","DependencyChart","checked","useSelector","state","subjectsStatus","dispatch","useDispatch","handleClick","id","type","toggleSubject","useState","graphData","setGraphData","_canDo","subject","toString","has","edges","filter","e","to","map","from","every","requirement","canDo","nodes","viewBox","xmlns","href","acercade_correlatividades","width","height","Object","entries","key","value","x","y","fill","fillOpacity","rx","ry","onClick","cursor","ACTION_SET_DIFFICULTY","ACTION_SET_SUBJECTS_PER_CUATRIMESTRE","DifficultyAssessment","subjectsDifficulty","subjectsPerCuatrimestre","updateDifficulty","difficulty","setDifficulty","updateSubjectsPerCuatrimestre","subjectsPerC","setSubjectsPerCuatrimestre","FormControl","variant","style","marginRight","InputLabel","htmlFor","OutlinedInput","required","labelWidth","error","onChange","parseInt","target","Select","labelId","MenuItem","Worker_fn","Worker","InscriptionRecommendation","subjects","setSubjects","setEdges","recommendedSubjects","setRecommendedSubjects","progress","setProgress","processing","setProcessing","updatePlan","worker","Date","onmessage","event","data","postMessage","fromEntries","sort","e1","e2","n","label","Button","LinearProgress","List","quant","ListItem","ListItemText","primary","Math","round","rootReducer","combineReducers","Set","action","newState","forEach","c","add","delete","store","createStore","App","className","Container","maxWidth","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.28eca75b.chunk.js","sourcesContent":["const ACTION_TOGGLE = 'toggle'\n\nexport function subjectsStatusReducer(state: Set<string> = new Set(), action: any): Set<string> {\n  const newState = new Set<string>()\n  state.forEach((c) => newState.add(c))\n  if (state && action.type === ACTION_TOGGLE) {\n    const {id} = action\n    if (state.has(id)) {\n      newState.delete(id)\n    } else {\n      newState.add(id)\n    }\n    return newState\n  }\n  return newState\n}\n\nexport function toggleSubject(id: string) {\n  return {\n    type: ACTION_TOGGLE,\n    id,\n  }\n}\n","export default __webpack_public_path__ + \"static/media/main.6a8fc0df.dot\";","import dotPath from './main.dot'\nimport {parseDOTNetwork} from 'vis-network/standalone'\n\nexport declare interface Node {\n  id: number,\n  label: string,\n}\n\nexport declare interface Edge {\n  from: number,\n  to: number,\n}\n\nexport declare interface GraphData {\n  nodes: Node[],\n  edges: Edge[],\n}\n\nlet network: Promise<GraphData> | null = null;\nexport async function getGraphData(): Promise<GraphData> {\n  if (!network) {\n    network = new Promise(async (resolve, reject) => {\n      const dot = await (await fetch(dotPath)).text()\n      resolve(parseDOTNetwork(dot))\n    })\n  }\n  return network\n}\n\nexport function subjectLength(subject: number | string): number {\n  const s = typeof(subject) === 'string' ? parseInt(subject) : subject\n  return (s === 137 || s === 139) ? 2 : 1\n}\n","import { GraphData } from './plan'\n\nconst subjectsRect = {\n  131: [268, 201, 136, 62],\n  144: [266, 358, 136, 62],\n  132: [268, 551, 136, 62],\n  135: [268, 657, 136, 62],\n  138: [479, 775, 133, 59],\n  136: [479, 657, 133, 59],\n  134: [479, 552, 133, 59],\n  142: [718, 774, 133, 59],\n  137: [718, 658, 133, 59],\n  133: [716, 551, 136, 62],\n  141: [718, 316, 133, 59],\n  139: [718, 211, 133, 59],\n  162: [954, 258, 134, 60],\n  145: [954, 434, 133, 59],\n  140: [954, 552, 133, 59],\n  167: [954, 657, 134, 60],\n  163: [952, 831, 134, 60],\n  169: [1187, 552, 134, 60],\n  168: [1187, 255, 134, 60],\n};\nconst canDo = (subject: number | string, checked: Set<string>, graphData: GraphData) => {\n  subject = subject.toString()\n  if (checked.has(subject)) {\n    return false;\n  }\n  const requirements = graphData.edges.filter((e) => e.to.toString() === subject).map((e) => e.from.toString())\n  return requirements.every((requirement) => checked.has(requirement))\n}\nexport { subjectsRect, canDo };\n","export default __webpack_public_path__ + \"static/media/acercade_correlatividades.a9264376.jpg\";","import React, { useState } from 'react';\nimport './DependencyChart.css'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { RootState } from './store'\nimport { toggleSubject } from './subjectsStatus'\nimport { getGraphData, GraphData } from './plan'\nimport { subjectsRect, canDo } from './dependencyChartData'\nimport acercade_correlatividades from './acercade_correlatividades.jpg'\n\nfunction DependencyChart() {\n  const checked = useSelector((state: RootState) => state.subjectsStatus);\n  const dispatch = useDispatch()\n  const handleClick = (id: string) => {\n    dispatch(toggleSubject(id))\n  }\n  const [graphData, setGraphData] = useState<null | GraphData>(null)\n  useState(() => {\n    (async () => {\n      setGraphData(await getGraphData())\n    })()\n  })\n  const _canDo = (subject: string) => {\n      if (!graphData) {\n        return false;\n      }\n      const defaultEdges = {nodes: [], edges: []}\n      return canDo(subject, checked, graphData || defaultEdges)\n  }\n  return (\n      <div>\n          <h2>Materias aprobadas</h2>\n          <p>Seleccioná qué materias ya aprobaste.</p>\n          <svg viewBox=\"0 0 1406 946\" xmlns=\"http://www.w3.org/2000/svg\">\n              <image href={acercade_correlatividades} width=\"1406\" height=\"946\"/>\n              {Object.entries(subjectsRect).map(([key, value]) => (\n                <rect key={key} x={value[0]} y={value[1]} width={value[2]} height={value[3]} fill={checked.has(key) ? 'red' : _canDo(key) ? 'yellow' : 'transparent'} fillOpacity=\"0.7\" rx=\"22\" ry=\"22\" onClick={() => handleClick(key.toString())} cursor=\"pointer\" />\n              ))}\n          </svg>\n      </div>\n  )\n}\n\nexport default DependencyChart\n","const ACTION_SET_DIFFICULTY = 'set_difficulty'\nconst ACTION_SET_SUBJECTS_PER_CUATRIMESTRE = 'set_subjects_per_cuatrimestre'\n\nexport function subjectsDifficultyReducer(state: number = 80, action: any) {\n  if (typeof state !== typeof undefined && action.type === ACTION_SET_DIFFICULTY) {\n    const {difficulty} = action\n    return difficulty\n  }\n  return state\n}\n\nexport function setDifficulty(difficulty: number) {\n  return {\n    type: ACTION_SET_DIFFICULTY,\n    difficulty,\n  }\n}\n\nexport function subjectsPerCuatrimestreReducer(state: number = 3, action: any) {\n  if (typeof state !== typeof undefined && action.type === ACTION_SET_SUBJECTS_PER_CUATRIMESTRE) {\n    const {subjectsPerCuatrimestre} = action\n    return subjectsPerCuatrimestre\n  }\n  return state\n}\n\nexport function setSubjectsPerCuatrimestre(subjectsPerCuatrimestre: number) {\n  return {\n    type: ACTION_SET_SUBJECTS_PER_CUATRIMESTRE,\n    subjectsPerCuatrimestre,\n  }\n}\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setDifficulty, setSubjectsPerCuatrimestre } from './subjectsDifficulty'\nimport { RootState } from './store'\n\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nfunction DifficultyAssessment() {\n  const subjectsDifficulty = useSelector((state: RootState) => state.subjectsDifficulty);\n  const subjectsPerCuatrimestre = useSelector((state: RootState) => state.subjectsPerCuatrimestre);\n\n  const dispatch = useDispatch()\n  const updateDifficulty = (difficulty: number) => {\n    dispatch(setDifficulty(difficulty))\n  }\n  const updateSubjectsPerCuatrimestre = (subjectsPerC: number) => {\n    dispatch(setSubjectsPerCuatrimestre(subjectsPerC))\n  }\n\n  return (\n    <div>\n      <h2>Cuatrimestres para aprobar las materias</h2>\n      <p>Estimar la dificultad de los finales. Aproximá qué porcentaje de finales pensás aprobar. Si pensás aprobar todos sería \"100\", si aprobás 4 de cada 5, \"80\".</p>\n      <FormControl variant=\"outlined\" style={{marginRight: 8}}>\n        <InputLabel htmlFor=\"porcentaje\">Porcentaje</InputLabel>\n        <OutlinedInput\n          required\n          id=\"porcentaje\"\n          style={{width: 90}}\n          labelWidth={80}\n          type=\"number\"\n          value={subjectsDifficulty}\n          error={subjectsDifficulty < 1 || subjectsDifficulty > 100}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateDifficulty(parseInt(e.target.value, 10))}\n          />\n      </FormControl>\n      <FormControl variant=\"outlined\">\n        <InputLabel htmlFor=\"materias-por-cuatrimestre\">Finales por cuatrimestre</InputLabel>\n        <Select\n          labelId=\"label-materias-por-cuatrimestre\"\n          id=\"materias-por-cuatrimestre\"\n          value={subjectsPerCuatrimestre}\n          onChange={(e: React.ChangeEvent<{value: unknown}>) => updateSubjectsPerCuatrimestre(e.target.value as number)}\n          labelWidth={180}\n          style={{width: 200}}\n        >\n          <MenuItem value={1}>1</MenuItem>\n          <MenuItem value={2}>2</MenuItem>\n          <MenuItem value={3}>3</MenuItem>\n          <MenuItem value={4}>4</MenuItem>\n        </Select>\n      </FormControl>\n    </div>\n  )\n}\n\nexport default DifficultyAssessment\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/estimateSubjects.worker.d71d4a1d.worker.js\");\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux'\nimport { RootState } from './store'\nimport { getGraphData } from './plan'\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n/* eslint-disable import/no-webpack-loader-syntax */\nimport Worker from 'worker-loader!./estimateSubjects.worker';\n\nconst populationSize = 10;\nconst simulations = 100;\n\nfunction InscriptionRecommendation() {\n  const subjectsDifficulty: number = useSelector((state: RootState) => state.subjectsDifficulty);\n  const subjectsPerCuatrimestre: number  = useSelector((state: RootState) => state.subjectsPerCuatrimestre);\n  const checked = useSelector((state: RootState) => state.subjectsStatus);\n  const [subjects, setSubjects] = useState<null | { [k: string]: any; }>(null)\n  const [edges, setEdges] = useState<null | { from: number, to: number }[]>(null)\n  const [recommendedSubjects, setRecommendedSubjects] = useState<null | [string, number][]>(null)\n  const [progress, setProgress] = useState<null | number>(null)\n  const [processing, setProcessing] = useState(false)\n\n  const updatePlan = async () => {\n    if (!subjects || !edges) return;\n    setProcessing(true)\n    const worker = new Worker();\n    const id = new Date()\n    worker.onmessage = (event) => {\n      if (event.data[0] === `progress_${id}`) {\n        setProgress(event.data[1] * 100)\n      }\n      if (event.data[0] === `return_${id}`) {\n        setRecommendedSubjects(event.data[1])\n        setProcessing(false)\n      }\n    }\n    worker.postMessage([\n      id,\n      'estimateSubjectsForNextCuatrimestre',\n      subjects,\n      subjectsDifficulty,\n      checked,\n      edges,\n      subjectsPerCuatrimestre,\n      populationSize,\n      simulations,\n    ])\n  }\n  useState(() => {\n    (async () => {\n      const graphData = await getGraphData()\n      setSubjects(Object.fromEntries(graphData.nodes.sort((e1, e2) => e1.id - e2.id).map((n) => [n.id, n.label])))\n      setEdges(graphData.edges)\n    })()\n  })\n  return (\n    <div>\n      <h2>Inscripciones recomendadas</h2>\n      {subjects && !processing && <Button onClick={updatePlan}>Crear plan</Button>}\n      {progress !== null && processing && <LinearProgress variant=\"determinate\" value={progress} />}\n      {!processing && recommendedSubjects && subjects && (\n        <List>\n          {recommendedSubjects.map(([id, quant]) => (\n            <ListItem key={id}>\n              <ListItemText primary={`${subjects[id]} (${Math.round(10000 * quant / simulations) / 100}%)`} />\n            </ListItem>\n          ))}\n        </List>\n      )}\n    </div>\n  )\n}\nexport default InscriptionRecommendation\n","import { combineReducers } from 'redux'\nimport { subjectsStatusReducer } from './subjectsStatus'\nimport { subjectsDifficultyReducer, subjectsPerCuatrimestreReducer } from './subjectsDifficulty'\nimport { createStore } from 'redux'\n\nlet rootReducer = combineReducers({\n  subjectsStatus: subjectsStatusReducer,\n  subjectsDifficulty: subjectsDifficultyReducer,\n  subjectsPerCuatrimestre: subjectsPerCuatrimestreReducer,\n})\n\nlet store = createStore(rootReducer);\nexport type RootState = ReturnType<typeof store.getState>\nexport default store;\n","import React from 'react';\nimport DependencyChart from './DependencyChart'\nimport DifficultyAssessment from './DifficultyAssessment'\nimport InscriptionRecommendation from './InscriptionRecommendation'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport Container from '@material-ui/core/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <Container maxWidth=\"lg\">\n          <DependencyChart />\n          <DifficultyAssessment />\n          <InscriptionRecommendation />\n        </Container>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}